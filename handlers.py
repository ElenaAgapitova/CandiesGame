"""–ú–æ–¥—É–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""

from aiogram import types

from asyncio import sleep

import kb_inline
import keybutton
import bot_raccoon
import game
import player
from create import dp, bot
import text
import datetime


@dp.message_handler(commands=['start', '—Å—Ç–∞—Ä—Ç'])
async def start(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°—Ç–∞—Ä—Ç"""
    name = message.from_user.first_name
    user_id = message.from_user.id
    img = open('images\\hello.jpg', 'rb')
    await bot.send_photo(user_id, img, caption=f'{name}{text.greetings}',
                         reply_markup=keybutton.kb_menu)

    now = datetime.datetime.now()
    user = list()
    user.append(now.strftime("%d-%m-%Y %H:%M"))
    user.append(user_id)
    user.append(message.from_user.full_name)
    user.append(message.from_user.username)
    user = list(map(str, user))
    with open('users.txt', 'a', encoding='UTF-8') as data:
        data.write(' | '.join(user) + '\n')


@dp.message_handler(commands=['rules', '–ø—Ä–∞–≤–∏–ª–∞'])
async def game_rules(message: types.Message):
    """–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã"""
    name = message.from_user.first_name
    await message.answer(f'{name}{text.rules}')


@dp.message_handler(commands=['new_game', '–∏–≥—Ä–∞'])
async def new_game(message: types.Message):
    """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã"""
    if not game.check_game():
        game.new_game()
    else:
        game.update_total()
    # name = message.from_user.first_name
    if game.check_game():
        await message.answer(f'–ù–∞ —Å—Ç–æ–ª–µ –ª–µ–∂–∏—Ç {game.get_total()} '
                             f'{(text.declension_sweets(game.get_total()))[1]}.\n\n'
                             f'–ë—Ä–æ—Å–∏–º –∫–æ—Å—Ç—åüé≤\n<b>–ß–µ—Ç</b> - —Ö–æ–¥–∏—à—å —Ç—ã!\n<b>–ù–µ—á–µ—Ç</b>- —Ö–æ–¥–∏—Ç –ï–Ω–æ—Ç!')
        dice_msg = await message.answer_dice()
        dice_value = dice_msg.dice.value
        await sleep(5)
        await message.answer(f'–í—ã–ø–∞–ª–æ <b>{dice_value}</b>!')
        if not dice_value % 2:
            await player.player_turn(message)
        else:
            await message.answer(f'–ü–µ—Ä–≤—ã–π —Ö–æ–¥–∏—Ç –ï–Ω–æ—Ç!')
            await bot_raccoon.bot_turn(message)


@dp.message_handler(commands=['set_total', '—Ö–æ—á—É'])
async def set_total(message: types.Message):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç"""
    if not game.check_game():
        total = message.text.split()
        if len(total) > 1 and total[1].isdigit():
            game.set_total_sweets(int(total[1]))
            await message.answer(f'K–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {total[1]}'
                                 f'\n–ù–∞—á–∞—Ç—å –∏–≥—Ä—É => /new_game')
        else:
            await message.answer(text.answer1_for_set_total)
    else:
        await message.answer(text.answer2_for_set_total)


@dp.message_handler(commands=['step', '—à–∞–≥'])
async def set_step(message: types.Message):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –∑–∞ —Ö–æ–¥"""
    if not game.check_game():
        total = message.text.split()
        if len(total) > 1 and total[1].isdigit():
            game.set_step_sweets(int(total[1]))
            await message.answer(f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –∑–∞ —Ö–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {total[1]}'
                                 f'\n–ù–∞—á–∞—Ç—å –∏–≥—Ä—É => /new_game')
        else:
            await message.answer(text.answer1_for_set_step)
    else:
        await message.answer(text.answer2_for_set_step)


@dp.message_handler(commands=['level', '—É—Ä–æ–≤–µ–Ω—å'])
async def game_level(message: types.Message):
    """–ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã"""
    if not game.check_game():
        level = game.change_level()
        await message.answer(f'–¢—ã –±—É–¥–µ—à—å –∏–≥—Ä–∞—Ç—å {level}')
    else:
        await message.answer(text.answer_for_level)


@dp.message_handler(commands=['menu', '–º–µ–Ω—é'])
async def show_menu(message: types.Message):
    """–ú–µ–Ω—é –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    name = message.from_user.first_name
    await message.answer(f'{name}{text.menu}')


@dp.message_handler(commands=['stop', '—Å—Ç–æ–ø'])
async def stop_game(message: types.Message):
    """–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É"""
    game.new_game()
    img = open('images\\stopgame.jpg', 'rb')
    await bot.send_photo(message.from_user.id, img, caption=f'{text.stop_game}')
    await message.answer(text='–ö–æ–≥–¥–∞ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –∂–º–∏üëá', reply_markup=kb_inline.markup2)


@dp.callback_query_handler(text='up')
async def wake_up(callback: types.CallbackQuery):
    await new_game(callback.message)


@dp.callback_query_handler(text=kb_inline.callback_list)
async def get_result(callback: types.CallbackQuery):
    result = callback.data
    if result == 'yes':
        await new_game(callback.message)
    else:
        img = open('images\\stopgame.jpg', 'rb')
        await bot.send_photo(callback.from_user.id, img, caption=f'{text.stop_game}')
        await callback.message.answer(text='–ö–æ–≥–¥–∞ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –∂–º–∏üëá',
                                      reply_markup=kb_inline.markup2)


@dp.message_handler()
async def game_sweets(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    name = message.from_user.first_name
    take = message.text
    if game.check_game():
        await player.player_game(message, take, name)
    else:
        await message.answer(f'{name}{text.menu}')
